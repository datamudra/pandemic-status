[{"/home/stan/Desktop/python_work/code/mdash/src/reportWebVitals.js":"1","/home/stan/Desktop/python_work/code/mdash/src/index.js":"2","/home/stan/Desktop/python_work/code/mdash/src/components/DashCard.js":"3","/home/stan/Desktop/python_work/code/mdash/src/components/TabPanels.js":"4","/home/stan/Desktop/python_work/code/mdash/src/App.js":"5","/home/stan/Desktop/python_work/code/mdash/src/components/Home.js":"6","/home/stan/Desktop/python_work/code/mdash/src/hooks/useStickySWR.js":"7","/home/stan/Desktop/python_work/code/mdash/src/components/QAPanels.js":"8","/home/stan/Desktop/python_work/code/mdash/src/components/ThisWeek.js":"9","/home/stan/Desktop/python_work/code/mdash/src/components/Trend21.js":"10","/home/stan/Desktop/python_work/code/mdash/src/components/LineChart.js":"11","/home/stan/Desktop/python_work/code/mdash/src/components/People.js":"12","/home/stan/Desktop/python_work/code/mdash/src/components/AllTime.js":"13"},{"size":362,"mtime":1609842718414,"results":"14","hashOfConfig":"15"},{"size":528,"mtime":1610686712198,"results":"16","hashOfConfig":"15"},{"size":3596,"mtime":1612154679548,"results":"17","hashOfConfig":"15"},{"size":3443,"mtime":1612159605704,"results":"18","hashOfConfig":"15"},{"size":6022,"mtime":1612268015276,"results":"19","hashOfConfig":"15"},{"size":8008,"mtime":1612310480992,"results":"20","hashOfConfig":"15"},{"size":617,"mtime":1608314406000,"results":"21","hashOfConfig":"15"},{"size":10652,"mtime":1612271203956,"results":"22","hashOfConfig":"15"},{"size":2348,"mtime":1612234858939,"results":"23","hashOfConfig":"15"},{"size":1783,"mtime":1612234855052,"results":"24","hashOfConfig":"15"},{"size":1838,"mtime":1612156992623,"results":"25","hashOfConfig":"15"},{"size":2475,"mtime":1612160092037,"results":"26","hashOfConfig":"15"},{"size":1919,"mtime":1612234858943,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1tbv1p6",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"33"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/stan/Desktop/python_work/code/mdash/src/reportWebVitals.js",[],["59","60"],"/home/stan/Desktop/python_work/code/mdash/src/index.js",[],["61","62"],"/home/stan/Desktop/python_work/code/mdash/src/components/DashCard.js",["63"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { Box, Grid, Paper } from '@material-ui/core'; \nimport InfoIcon from '@material-ui/icons/Info'; \n\nconst numberFormatter = new Intl.NumberFormat('en-US', {\n  maximumFractionDigits: 1, minimumFractionDigits: 0,\n});\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n      padding: 0,\n      '&:last-child': {\n        paddingBottom: 0,\n      },\n    },\n  lrow: {\n    textAlign: 'center',\n    backgroundColor: '#fbe5e7',\n    color: '#ff6384',\n    fontSize: 18\n  },\n  mrow: {\n    textAlign: 'center',\n  },\n  rrow: {\n    textAlign: 'center',\n    backgroundColor: '#f4f6ff',\n    color: '#36a2eb',\n    fontSize: 18,\n  },\n\n  title: {\n    fontSize: 25,\n    textAlign: 'center',\n  },\n  rdc: { color: '#36a2eb', fontSize: 11, fontWeight: 'bold' },\n  ldc: { color: '#ff6384', fontSize: 11, fontWeight: 'bold' },\n  arrow: {\n    fontSize: 10,\n  },\n  \n  \n}));\n\nconst DV = (props) => {\n  const { d, dc } = props;\n  const classes = useStyles();\n\n  return (\n    <Box component=\"span\" className={classes[dc]} >\n      <Box component=\"span\" className={classes.arrow} >\n      {d > 0\n        ? '\\u25B2' + Math.abs(d)+'%'\n        : d < 0\n          ? '\\u25BC' + Math.abs(d)+'%'\n          : ''}\n      </Box>\n    </Box>\n  );\n};\n\nconst DashCard = props => {\n  const { t, ll, rl, rs, ls, rd, ld, isd, isp=false} = props;\n\tconst classes = useStyles();\n  return (\n  <div>\n    <Card /* raised={true} */  >\n        <CardContent className={classes.root}>\n          <Grid container direction='row' >        \n              <Grid item xs={12} >\n                <Paper className={classes.mrow} variant='outlined' square={true}>\n                  <Typography>\n                    {t}\n                  </Typography>\n                </Paper>\n              </ Grid>\n            <Grid container className={classes.lrow} >\n              <Grid item xs={6} >\n                  <Paper className={classes.lrow} variant='outlined' square={true}>\n                  <Typography >\n                    {ll} \n                  </Typography>\n                </Paper>\n              </Grid>\n              <Grid item xs={6}  >\n                <Paper className={classes.lrow} variant='outlined' square={true}>\n                  <Typography>\n                    {ls < 0 ? 'No data' : numberFormatter.format(ls)} {isp & ls>0 ? '%' : ''}  {isd & ls>0 \n                            ? <DV className={classes.ld} d={ld} dc='ldc' />\n                            : ''}\n                  </Typography>\n                </Paper>\n              </Grid>\n            </ Grid >\n            <Grid container className={classes.rrow} >\n              <Grid item xs={6} >\n                <Paper className={classes.rrow} variant='outlined' square={true}>\n                  <Typography >\n                    {rl} \n                  </Typography>\n                </Paper>\n              </Grid>\n              <Grid item xs={6}>\n                <Paper className={classes.rrow} variant='outlined' square={true}>\n                  <Typography>\n                    {rs < 0 ? 'No data' :numberFormatter.format(rs)} {isp & rs>0 ? '%' : ''} {isd & rs>0\n                      ? <DV className={classes.rd} d={rd} dc='rdc' />\n                      : ''}\n                  </Typography>\n                </Paper>\n              </Grid>\n            </Grid>\n          </Grid>\n      </CardContent>\n    </Card>\n  </div>\n  );\n};\n\nexport default DashCard;\n",["64","65"],"/home/stan/Desktop/python_work/code/mdash/src/components/TabPanels.js",[],"/home/stan/Desktop/python_work/code/mdash/src/App.js",[],"/home/stan/Desktop/python_work/code/mdash/src/components/Home.js",["66"],"/home/stan/Desktop/python_work/code/mdash/src/hooks/useStickySWR.js",[],"/home/stan/Desktop/python_work/code/mdash/src/components/QAPanels.js",[],"/home/stan/Desktop/python_work/code/mdash/src/components/ThisWeek.js",["67","68","69","70"],"import { Chip, Grid, Typography } from '@material-ui/core';\nimport React from 'react';\nimport DashCard from './DashCard';\nimport RestoreIcon from '@material-ui/icons/Restore';\n\n\nconst ThisWeek = (props) => {\n\n    const { l, r, m} = props;\n\n    return (\n        <Grid container spacing={0}>\n            <Grid item xs={12}>\n                <Typography align='center'>\n                    Numbers are totals per million population\n                </Typography> \n            </Grid>\n            <Grid item xs={12}>\n                <Typography align='center' gutterBottom >\n                    7 day time period ({m.wr})\n                </Typography>\n            </Grid>\n        <Grid container direction='row' spacing={1} >\n            <Grid item xs={12} sm={6} >\n                <DashCard t='Confirmed Cases'\n                    ll={l.loc}\n                    rl={r.loc}\n                    rs={r.wmn}\n                    ls={l.wmn}\n                    ld={l.wdn}  rd={r.wdn} isd={true} />\n            </Grid>\n            <Grid item xs={12} sm={6} >\n                <DashCard t='Deaths'\n                    ll={l.loc}\n                    rl={r.loc}\n                    rs={r.wmd}\n                    ls={l.wmd}\n                    ld={l.wdd} rd={r.wdd} isd={true} />\n            </Grid>\n            <Grid item xs={12} sm={6} >\n                <DashCard t='Tests'\n                    ll={l.tlv}\n                    rl={r.tlv}\n                    rs={r.wmt==0 ? -1 : r.wmt}\n                    ls={l.wmt == 0 ? -1 : l.wmt}\n                    ld={l.wdt} rd={r.wdt} isd={true} />\n            </Grid>\n            <Grid item xs={12} sm={6} >\n                <DashCard t='Vaccinations'\n                    ll={l.l1}\n                    rl={r.l1}\n                    rs={r.wmv == 0 ? -1 : r.wmv}\n                    ls={l.wmv == 0 ? -1 : l.wmv}\n                    ld={l.wdv} rd={r.wdv} isd={true} />\n            </Grid> \n                <Grid item xs={12}>\n                    <Typography align='center'>\n                        <Chip\n                            icon={<RestoreIcon />}\n                            label={m.ut}\n                            variant='outlined'\n                        />\n                    </Typography>\n                </Grid>\n                \n        </Grid>\n           \n        </Grid>\n\n    );\n};\n\nexport default ThisWeek;\n","/home/stan/Desktop/python_work/code/mdash/src/components/Trend21.js",[],"/home/stan/Desktop/python_work/code/mdash/src/components/LineChart.js",[],"/home/stan/Desktop/python_work/code/mdash/src/components/People.js",[],"/home/stan/Desktop/python_work/code/mdash/src/components/AllTime.js",["71","72","73","74"],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"75","replacedBy":"79"},{"ruleId":"77","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":7,"column":8,"nodeType":"83","messageId":"84","endLine":7,"endColumn":16},{"ruleId":"75","replacedBy":"85"},{"ruleId":"77","replacedBy":"86"},{"ruleId":"81","severity":1,"message":"87","line":11,"column":8,"nodeType":"83","messageId":"84","endLine":11,"endColumn":19},{"ruleId":"88","severity":1,"message":"89","line":44,"column":30,"nodeType":"90","messageId":"91","endLine":44,"endColumn":32},{"ruleId":"88","severity":1,"message":"89","line":45,"column":31,"nodeType":"90","messageId":"91","endLine":45,"endColumn":33},{"ruleId":"88","severity":1,"message":"89","line":52,"column":31,"nodeType":"90","messageId":"91","endLine":52,"endColumn":33},{"ruleId":"88","severity":1,"message":"89","line":53,"column":31,"nodeType":"90","messageId":"91","endLine":53,"endColumn":33},{"ruleId":"88","severity":1,"message":"89","line":37,"column":31,"nodeType":"90","messageId":"91","endLine":37,"endColumn":33},{"ruleId":"88","severity":1,"message":"89","line":38,"column":31,"nodeType":"90","messageId":"91","endLine":38,"endColumn":33},{"ruleId":"88","severity":1,"message":"89","line":45,"column":31,"nodeType":"90","messageId":"91","endLine":45,"endColumn":33},{"ruleId":"88","severity":1,"message":"89","line":46,"column":31,"nodeType":"90","messageId":"91","endLine":46,"endColumn":33},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],["92"],["93"],"no-unused-vars","'InfoIcon' is defined but never used.","Identifier","unusedVar",["92"],["93"],"'ExploreIcon' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]